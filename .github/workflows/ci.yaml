name: "CI Pipeline"
on:
  push:
    branches:
      - master
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  test:
    runs-on: ubuntu-24.04
    # if: false # Temporarely disabling this job to work on something else instead
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: SonarQube Cloud Scan
        uses: SonarSource/sonarqube-scan-action@v4.2.1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=basiuktv
            -Dsonar.projectKey=BasiukTV_devsecops-sandbox-juice-shop

      - name: Add SonarQube Quality Gate Badge
        run: |
          echo "## SonarQube Scan" >> $GITHUB_STEP_SUMMARY
          echo "[![Quality gate](https://sonarcloud.io/api/project_badges/quality_gate?project=BasiukTV_devsecops-sandbox-juice-shop)](https://sonarcloud.io/summary/new_code?id=BasiukTV_devsecops-sandbox-juice-shop)" >> $GITHUB_STEP_SUMMARY

  docker:
    runs-on: ubuntu-24.04
    env:
      DOCKER_HUB_USERNAME: tbeit
    # if: false # Temporarely disabling this job to work on something else instead
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Login to Docker Hub"
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ env.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: "Build Docker image"
        run: docker build -t ${{ env.DOCKER_HUB_USERNAME }}/juice-shop:${{ github.run_id }} .

      - name: "Start Workflow Summary"
        run: echo '## Docker Scout Scan Results' >> $GITHUB_STEP_SUMMARY

      - name: Docker Scout Scan
        uses: docker/scout-action@v1.16.1
        with:
          command: quickview,cves,recommendations
          only-severities: critical,high
          # exit-code: true # Fails the whole job if the vulnerabilities are found

      - name: "Push Docker image"
        run: docker push ${{ env.DOCKER_HUB_USERNAME }}/juice-shop:${{ github.run_id }}

  terraform:
    runs-on: ubuntu-24.04
    env:
      TF_HOME: ${{ github.workspace }}/terraform
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Install Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Will check Terraform Configuration Formatting
      # (any output of terraform fmt will be considered an error)
      - name: Terraform Format Check
        if: false # Something strange is happening with this step, so I'm disabling it for now
        run: |
          echo "Running Terraform Format check in the following directory: $TF_HOME"
          cd $TF_HOME
          output=$(terraform fmt)
          if [ -z "$output" ]; then
            echo "Terraform Format check is successful."
          else
            echo "Terraform Format check failed for the following files:"
            echo "$output"
            exit 1
          fi
          cd -

      - name: Terraform Validate Check
        run: |
          cd $TF_HOME
          terraform init
          terraform validate
          cd -

      - name: Run Trivy vulnerability scanner in IaC mode
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-ref: ${{ env.TF_HOME }}
          scan-type: 'config'
          hide-progress: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        if: always() # Should run even if the previous step fails
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Upload Terraform Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform
          # Upload all .tf and .tfvars file in the terraform home, except .terraform directory
          path: |
            ${{env.TF_HOME}}/*.tf*
            !${{env.TF_HOME}}/.terraform
